{"version":3,"sources":["webpack:///webpack/bootstrap 2cdeae5ec4e6deff41e2","webpack:///./src/index.tsx","webpack:///external \"React\"","webpack:///external \"ReactDOM\"","webpack:///./src/components/Hello.tsx"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;ACrCA,oCAA+B;AAC/B,uCAAsC;AAEtC,sCAA2C;AAE3C,SAAQ,CAAC,MAAM,CACb,oBAAC,aAAK,IAAC,QAAQ,EAAC,YAAY,EAAC,SAAS,EAAC,OAAO,EAAC,OAAO,EAAE,GAAG,GAAI,EAC/D,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,CACnC,CAAC;;;;;;;ACTF,wB;;;;;;ACAA,2B;;;;;;;;;;;;ACCA,oCAA+B;AAQ/B,8DAA6D;AAC7D,oBAAmB;AACnB,qBAAoB;AACpB,qCAAoC;AACpC,mBAAkB;AAClB,SAAQ;AACR,OAAM;AACN,KAAI;AAEJ,iFAAgF;AAChF,oEAAmE;AAEnE;KAA2B,yBAA+B;KAA1D;;KAMA,CAAC;KALC,sBAAM,GAAN;SACE,MAAM,CAAC;;aACO,IAAI,CAAC,KAAK,CAAC,QAAQ;;aAAI,IAAI,CAAC,KAAK,CAAC,OAAO;;aAAO,IAAI,CAAC,KAAK,CAAC,SAAS;iBAC7E,CAAC;KACR,CAAC;KACH,YAAC;AAAD,EAAC,CAN0B,KAAK,CAAC,SAAS,GAMzC;AANY,uBAAK","file":"./dist/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 2cdeae5ec4e6deff41e2\n **/","\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { Hello } from \"./components/Hello\";\n\nReactDOM.render(\n  <Hello compiler=\"TypeScript\" framework=\"React\" version={2.0} />,\n  document.getElementById(\"example\")\n);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.tsx\n **/","module.exports = React;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"React\"\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = ReactDOM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"ReactDOM\"\n ** module id = 2\n ** module chunks = 0\n **/","\nimport * as React from \"react\";\n\ninterface HelloProps { \n  compiler: string; \n  version: number;\n  framework: string;\n}\n\n// You can customize the intrinsic elements that are allowed.\n// declare global {\n//   namespace JSX {\n//     interface IntrinsicElements {\n//       foo: any;\n//     }\n//   }\n// }\n\n// Use parameter destructuring and defaults for easy definition of 'props' type.\n// const Greeter = ({name = 'world'}) => <div>Hello, {name}!</div>;\n\nexport class Hello extends React.Component<HelloProps, {}> {\n  render() {\n    return <h1>\n      Hello from {this.props.compiler} v{this.props.version} and {this.props.framework}!\n    </h1>;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/components/Hello.tsx\n **/"],"sourceRoot":""}